/* Copyright 2014 - Yaqiang Wang,
 * yaqiang.wang@gmail.com
 * 
 * This library is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2.1 of the License, or (at
 * your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser
 * General Public License for more details.
 */
package org.meteothink.trajstat.forms;

import org.meteoinfo.common.GenericFileFilter;
import org.meteoinfo.geo.layer.VectorLayer;
import org.meteoinfo.geo.legend.GroupNode;
import org.meteoinfo.geo.legend.LayerNode;
import org.meteoinfo.geo.plugin.IApplication;
import org.meteoinfo.ndarray.DataType;
import org.meteoinfo.table.Field;
import org.meteoinfo.ui.CheckBoxListEntry;

import javax.swing.*;
import java.awt.*;
import java.io.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Yaqiang Wang
 */
public class FrmAddData extends javax.swing.JDialog {

    private final IApplication app;
    private File infile;
    private double undef = -9999.0;

    /**
     * Creates new form FrmAddXYData
     * @param parent
     * @param modal
     */
    public FrmAddData(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        app = (IApplication) parent;
        this.jTextArea1.setText("This tool will add data from a comma-delimited text file to trajectories"
                + " according to the date field. The file must contain column titles as the first row and"
                + " one or two date columns.");
        this.jPanel_SelFields.setEnabled(false);
        this.jPanel_FieldProp.setEnabled(false);
        this.jComboBox_DataField.removeAllItems();
        this.jComboBox_StartDateField.removeAllItems();
        this.jComboBox_EndDateField.removeAllItems();
        this.jComboBox_DateFormat.setEditable(true);
        this.jComboBox_DateFormat.removeAllItems();        
        this.jComboBox_DateFormat.addItem("yyyyMMddHH");
        this.jComboBox_DateFormat.addItem("yyyy-MM-dd HH:mm");
        this.jComboBox_DateFormat.addItem("yyyy/M/d H:mm");
        this.jComboBox_TimeZone.removeAllItems();
        for (int i = -12; i <= 12; i++) {
            this.jComboBox_TimeZone.addItem(this.getTimeZoneString(i));
        }
        this.jComboBox_TimeZone.setSelectedItem(this.getTimeZoneString(0));
        this.jButton_AddData.setEnabled(false);
        this.jComboBox_Type.removeAllItems();
        this.jComboBox_Type.addItem(DataType.INT);
        this.jComboBox_Type.addItem(DataType.DOUBLE);
        this.jComboBox_Type.addItem(DataType.STRING);
        this.jComboBox_Type.setSelectedIndex(1);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton_InputFile = new javax.swing.JButton();
        jTextField_InputFile = new javax.swing.JTextField();
        jPanel_SelFields = new javax.swing.JPanel();
        jLabel_StartDate = new javax.swing.JLabel();
        jComboBox_StartDateField = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jComboBox_DataField = new javax.swing.JComboBox();
        jLabel_EndDate = new javax.swing.JLabel();
        jComboBox_EndDateField = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jComboBox_DateFormat = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        jComboBox_TimeZone = new javax.swing.JComboBox();
        jButton_AddData = new javax.swing.JButton();
        jButton_Cancel = new javax.swing.JButton();
        jPanel_FieldProp = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jTextField_Name = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jComboBox_Type = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jSpinner_Width = new javax.swing.JSpinner();
        jSpinner_Precision = new javax.swing.JSpinner();
        jLabel8 = new javax.swing.JLabel();
        jTextField_MissingValue = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Add data to trajectories");

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 204));
        jScrollPane1.setWheelScrollingEnabled(false);

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(4);
        jTextArea1.setText("...");
        jTextArea1.setWrapStyleWord(true);
        jTextArea1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jScrollPane1.setViewportView(jTextArea1);

        jButton_InputFile.setText("Input File");
        jButton_InputFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_InputFileActionPerformed(evt);
            }
        });

        jPanel_SelFields.setBorder(javax.swing.BorderFactory.createTitledBorder("Select Fields From Input File"));

        jLabel_StartDate.setText("Start Date:");

        jComboBox_StartDateField.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel2.setText("Data Field:");

        jComboBox_DataField.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox_DataField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_DataFieldActionPerformed(evt);
            }
        });

        jLabel_EndDate.setText("End Date:");

        jComboBox_EndDateField.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel1.setText("Date Format:");

        jComboBox_DateFormat.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel7.setText("Time Zone:");

        jComboBox_TimeZone.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout jPanel_SelFieldsLayout = new javax.swing.GroupLayout(jPanel_SelFields);
        jPanel_SelFields.setLayout(jPanel_SelFieldsLayout);
        jPanel_SelFieldsLayout.setHorizontalGroup(
            jPanel_SelFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_SelFieldsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel_SelFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel_SelFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel_SelFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel_StartDate))
                        .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                    .addGroup(jPanel_SelFieldsLayout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jLabel_EndDate)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel_SelFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBox_EndDateField, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBox_DataField, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBox_TimeZone, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBox_StartDateField, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBox_DateFormat, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel_SelFieldsLayout.setVerticalGroup(
            jPanel_SelFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_SelFieldsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel_SelFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_StartDate)
                    .addComponent(jComboBox_StartDateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel_SelFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_EndDate)
                    .addComponent(jComboBox_EndDateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel_SelFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jComboBox_DateFormat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel_SelFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jComboBox_TimeZone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel_SelFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jComboBox_DataField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton_AddData.setText("Add Data");
        jButton_AddData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_AddDataActionPerformed(evt);
            }
        });

        jButton_Cancel.setText("Cancel");
        jButton_Cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_CancelActionPerformed(evt);
            }
        });

        jPanel_FieldProp.setBorder(javax.swing.BorderFactory.createTitledBorder("Data Field Property"));

        jLabel3.setText("Name:");

        jLabel4.setText("Type:");

        jComboBox_Type.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox_Type.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_TypeActionPerformed(evt);
            }
        });

        jLabel5.setText("Width:");

        jLabel6.setText("Precision:");

        jLabel8.setText("Missing Value:");

        jTextField_MissingValue.setText("-9999.0");

        javax.swing.GroupLayout jPanel_FieldPropLayout = new javax.swing.GroupLayout(jPanel_FieldProp);
        jPanel_FieldProp.setLayout(jPanel_FieldPropLayout);
        jPanel_FieldPropLayout.setHorizontalGroup(
            jPanel_FieldPropLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_FieldPropLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel_FieldPropLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(jPanel_FieldPropLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField_MissingValue)
                    .addComponent(jSpinner_Width, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jComboBox_Type, javax.swing.GroupLayout.Alignment.TRAILING, 0, 215, Short.MAX_VALUE)
                    .addComponent(jTextField_Name, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSpinner_Precision))
                .addContainerGap())
        );
        jPanel_FieldPropLayout.setVerticalGroup(
            jPanel_FieldPropLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_FieldPropLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel_FieldPropLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField_Name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel_FieldPropLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jComboBox_Type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel_FieldPropLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jSpinner_Width, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel_FieldPropLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jSpinner_Precision, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel_FieldPropLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jTextField_MissingValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addComponent(jButton_AddData)
                        .addGap(67, 67, 67)
                        .addComponent(jButton_Cancel)
                        .addGap(65, 65, 65))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel_SelFields, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton_InputFile)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField_InputFile))
                            .addComponent(jPanel_FieldProp, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_InputFile)
                    .addComponent(jTextField_InputFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jPanel_SelFields, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel_FieldProp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_AddData)
                    .addComponent(jButton_Cancel))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_InputFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_InputFileActionPerformed
        // TODO add your handling code here:
        String path = System.getProperty("user.dir");
        File pathDir = new File(path);

        JFileChooser aDlg = new JFileChooser();
        aDlg.setAcceptAllFileFilterUsed(false);
        aDlg.setCurrentDirectory(pathDir);
        String[] fileExts = new String[]{"csv", "txt"};
        GenericFileFilter allFileFilter = new GenericFileFilter(fileExts, "Supported Formats");
        aDlg.addChoosableFileFilter(allFileFilter);
        fileExts = new String[]{"csv"};
        GenericFileFilter mapFileFilter = new GenericFileFilter(fileExts, "CSV File (*.csv)");
        aDlg.addChoosableFileFilter(mapFileFilter);
        fileExts = new String[]{"txt"};
        mapFileFilter = new GenericFileFilter(fileExts, "Text File (*.txt)");
        aDlg.addChoosableFileFilter(mapFileFilter);
        aDlg.setFileFilter(allFileFilter);
        if (JFileChooser.APPROVE_OPTION == aDlg.showOpenDialog(this)) {
            infile = aDlg.getSelectedFile();
            System.setProperty("user.dir", infile.getParent());
            this.jTextField_InputFile.setText(infile.getAbsolutePath());
            try {
                BufferedReader sr = new BufferedReader(new FileReader(infile));
                String title = sr.readLine();
                String[] titleArray = title.split(",");
                if (titleArray.length <= 1) {
                    JOptionPane.showMessageDialog(null, "File Format Error!");
                } else {
                    this.jPanel_SelFields.setEnabled(true);
                    this.jComboBox_StartDateField.removeAllItems();
                    this.jComboBox_EndDateField.removeAllItems();
                    this.jComboBox_DataField.removeAllItems();
                    this.jComboBox_EndDateField.addItem("Null");
                    for (int i = 0; i < titleArray.length; i++) {
                        this.jComboBox_StartDateField.addItem(titleArray[i]);
                        this.jComboBox_EndDateField.addItem(titleArray[i]);
                        this.jComboBox_DataField.addItem(titleArray[i]);
                    }
                }
                sr.close();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(FrmAddData.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(FrmAddData.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton_InputFileActionPerformed

    private void jButton_AddDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_AddDataActionPerformed
        BufferedReader sr = null;
        try {
            //Get field index
            int sDateFldIdx = this.jComboBox_StartDateField.getSelectedIndex();
            int eDateFldIdx = this.jComboBox_EndDateField.getSelectedIndex();
            int dataFldIdx = this.jComboBox_DataField.getSelectedIndex();
            String formatStr = this.jComboBox_DateFormat.getSelectedItem().toString();
            DateTimeFormatter format = DateTimeFormatter.ofPattern(formatStr);
            String timeZoneStr = this.jComboBox_TimeZone.getSelectedItem().toString();
            int timeZone = this.getTimeZone(timeZoneStr);      
            String mvalueStr = this.jTextField_MissingValue.getText();
            this.undef = Double.parseDouble(mvalueStr);
            if (eDateFldIdx == 0) {
                //Read data
                List<String[]> myDataList = new ArrayList<>();
                sr = new BufferedReader(new FileReader(infile));
                String aDataStr;
                String[] aDataArray;
                int N;
                sr.readLine();
                aDataStr = sr.readLine();
                while (aDataStr != null) {
                    aDataArray = aDataStr.split(",");
                    if (aDataArray.length > Math.max(sDateFldIdx, dataFldIdx)) {
                        String[] theData = new String[2];
                        theData[0] = aDataArray[sDateFldIdx];
                        theData[1] = aDataArray[dataFldIdx];
                        myDataList.add(theData);
                    }
                    aDataStr = sr.readLine();
                }
                sr.close();
                N = myDataList.size();
                if (N == 0) {
                    JOptionPane.showMessageDialog(null, "No data was extracted from the file!");
                    return;
                }
                //int TLen = myDataList.get(0)[0].length();
                //Select layers
                GroupNode gNode = app.getMapDocument().getActiveMapFrame().getGroupByName("Trajectory");
                FrmMultiSel frmMultiSel = new FrmMultiSel((JFrame) app, true);
                frmMultiSel.setTitle("Select Layers");
                frmMultiSel.setLabelText("Layers:");
                DefaultListModel listModel = new DefaultListModel();
                for (LayerNode lNode : gNode.getLayers()) {
                    listModel.addElement(new CheckBoxListEntry(lNode.getMapLayer(), true));
                }
                frmMultiSel.setListModel(listModel);
                frmMultiSel.setLocationRelativeTo((JFrame) app);
                frmMultiSel.setVisible(true);
                List<VectorLayer> layers = new ArrayList<>();
                if (frmMultiSel.isOK()) {
                    listModel = frmMultiSel.getListModel();
                    int i;
                    for (i = 0; i < listModel.getSize(); i++) {
                        if (((CheckBoxListEntry) listModel.get(i)).isSelected()) {
                            layers.add((VectorLayer) ((CheckBoxListEntry) listModel.get(i)).getValue());
                        }
                    }

                    if (layers.isEmpty()) {
                        JOptionPane.showMessageDialog(null, "No layer was selected!");
                        return;
                    }

                    //---- Show progressbar
                    app.getProgressBar().setVisible(true);
                    app.getProgressBar().setValue(0);
                    app.getProgressBarLabel().setVisible(true);
                    this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

                    //---- Add data to layers
                    String fldName = this.jTextField_Name.getText();
                    DataType aType = (DataType) this.jComboBox_Type.getSelectedItem();
                    int fLen = (Integer) this.jSpinner_Width.getValue();
                    int fDec = (Integer) this.jSpinner_Precision.getValue();                    

                    int sNum;
                    int CFldIdx;
                    int j;
                    int dateIdx;
                    String aDateStr;
                    int aYear;
                    int aMonth;
                    int aDay;
                    int aHour;
                    Object value;
                    LocalDateTime dt;

                    for (VectorLayer layer : layers) {
                        app.getProgressBarLabel().setText(layer.getLayerName());
                        CFldIdx = layer.getFieldIdxByName(fldName);
                        if (CFldIdx == -1) {
                            Field fld = new Field(fldName, aType, fLen, fDec);
                            layer.editAddField(fld);
                            CFldIdx = layer.getFieldNumber() - 1;
                        }
                        sNum = layer.getShapeNum();
                        dateIdx = layer.getFieldIdxByName("Date");
                        if (dateIdx > -1) {
                            for (i = 0; i < sNum; i++) {
                                dt = (LocalDateTime) layer.getCellValue("Date", i);
                                int hour = Integer.parseInt(layer.getCellValue("Hour", i).toString());
                                dt = dt.withHour(hour);
                                dt = dt.plusHours(timeZone);
                                aDateStr = format.format(dt);
                                value = undef;
                                switch (aType) {
                                    case INT:
                                        value = (int) undef;
                                        break;
                                    case STRING:
                                        value = "Null";
                                        break;
                                }
                                layer.editCellValue(CFldIdx, i, value);
                                int tlen;
                                String dstr;
                                for (j = 0; j < N; j++) {
                                    tlen = myDataList.get(j)[0].length();
                                    if (tlen <= aDateStr.length())
                                        dstr = aDateStr.substring(0, tlen);
                                    else
                                        dstr = aDateStr;
                                    if (dstr.equals(myDataList.get(j)[0])) {
                                        String dStr = myDataList.get(j)[1];
                                        value = dStr;
                                        switch (aType) {
                                            case INT:
                                                if (dStr.isEmpty()) {
                                                    value = (int) undef;
                                                } else {
                                                    value = Integer.parseInt(dStr);
                                                }
                                                break;
                                            case DOUBLE:
                                                if (dStr.isEmpty()) {
                                                    value = undef;
                                                } else {
                                                    value = Double.parseDouble(dStr);
                                                }
                                                break;
                                        }
                                        layer.editCellValue(CFldIdx, i, value);
                                        break;
                                    }
                                }
                                app.getProgressBar().setValue((int) (((double) i + 1) / sNum * 100));
                            }
                        } else {
                            for (i = 0; i < sNum; i++) {
                                aYear = Integer.parseInt(layer.getCellValue("Year", i).toString());
                                aMonth = Integer.parseInt(layer.getCellValue("Month", i).toString());
                                aDay = Integer.parseInt(layer.getCellValue("Day", i).toString());
                                aHour = Integer.parseInt(layer.getCellValue("Hour", i).toString());
                                dt = LocalDateTime.of(aYear, aMonth, dateIdx, aDay, aHour);
                                dt = dt.plusHours(timeZone);
                                aDateStr = format.format(dt);
                                int tlen;
                                String dstr;
                                for (j = 0; j <= N - 1; j++) {
                                    tlen = myDataList.get(j)[0].length();
                                    if (tlen <= aDateStr.length())
                                        dstr = aDateStr.substring(0, tlen);
                                    else
                                        dstr = aDateStr;
                                    if (dstr.equals(myDataList.get(j)[0])) {
                                        layer.editCellValue(CFldIdx, i, myDataList.get(j)[1]);
                                        break;
                                    }
                                }
                            }
                        }

                        layer.getAttributeTable().save();
                    }
                }
            } else {
                eDateFldIdx -= 1;
                //Read data                
                List<Object[]> myDataList = new ArrayList<>();
                sr = new BufferedReader(new FileReader(infile));
                String aDataStr;
                String[] aDataArray;
                int N = 0;
                sr.readLine();
                aDataStr = sr.readLine();
                while (aDataStr != null) {
                    aDataArray = aDataStr.split(",");
                    if (aDataArray.length > Math.max(sDateFldIdx, dataFldIdx)) {
                        Object[] theData = new Object[3];
                        theData[0] = format.parse(aDataArray[sDateFldIdx]);
                        theData[1] = format.parse(aDataArray[eDateFldIdx]);
                        theData[2] = aDataArray[dataFldIdx];
                        myDataList.add(theData);
                    }
                    aDataStr = sr.readLine();
                }
                sr.close();
                N = myDataList.size();
                if (N == 0) {
                    JOptionPane.showMessageDialog(null, "No data was extracted from the file!");
                    return;
                }

                //Select layers
                GroupNode gNode = app.getMapDocument().getActiveMapFrame().getGroupByName("Trajectory");
                FrmMultiSel frmMultiSel = new FrmMultiSel((JFrame) app, true);
                frmMultiSel.setTitle("Select Layers");
                frmMultiSel.setLabelText("Layers:");
                DefaultListModel listModel = new DefaultListModel();
                for (LayerNode lNode : gNode.getLayers()) {
                    listModel.addElement(new CheckBoxListEntry(lNode.getMapLayer(), true));
                }
                frmMultiSel.setListModel(listModel);
                frmMultiSel.setLocationRelativeTo((JFrame) app);
                frmMultiSel.setVisible(true);
                List<VectorLayer> layers = new ArrayList<>();
                if (frmMultiSel.isOK()) {
                    listModel = frmMultiSel.getListModel();
                    int i;
                    for (i = 0; i < listModel.getSize(); i++) {
                        if (((CheckBoxListEntry) listModel.get(i)).isSelected()) {
                            layers.add((VectorLayer) ((CheckBoxListEntry) listModel.get(i)).getValue());
                        }
                    }

                    if (layers.isEmpty()) {
                        JOptionPane.showMessageDialog(null, "No layer was selected!");
                        return;
                    }

                    //---- Show progressbar
                    app.getProgressBar().setVisible(true);
                    app.getProgressBar().setValue(0);
                    app.getProgressBarLabel().setVisible(true);
                    this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

                    //---- Add data to layers
                    String fldName = this.jTextField_Name.getText();
                    DataType aType = (DataType) this.jComboBox_Type.getSelectedItem();
                    int fLen = (Integer) this.jSpinner_Width.getValue();
                    int fDec = (Integer) this.jSpinner_Precision.getValue();

                    int sNum, CFldIdx, j;
                    Object value;

                    for (VectorLayer layer : layers) {
                        app.getProgressBarLabel().setText(layer.getLayerName());
                        CFldIdx = layer.getFieldIdxByName(fldName);
                        if (CFldIdx == -1) {
                            Field fld = new Field(fldName, aType, fLen, fDec);
                            layer.editAddField(fld);
                            CFldIdx = layer.getFieldNumber() - 1;
                        }
                        sNum = layer.getShapeNum();
                        for (i = 0; i < sNum; i++) {
                            LocalDateTime aDate = (LocalDateTime) layer.getCellValue("Date", i);
                            int hour = Integer.parseInt(layer.getCellValue("Hour", i).toString());
                            aDate = aDate.withHour(hour);
                            aDate = aDate.plusHours(timeZone);
                            value = undef;
                            switch (aType) {
                                case INT:
                                    value = (int) undef;
                                    break;
                                case STRING:
                                    value = "Null";
                                    break;
                            }
                            layer.editCellValue(CFldIdx, i, value);
                            for (j = 0; j < N; j++) {
                                LocalDateTime sdate = (LocalDateTime) myDataList.get(j)[0];
                                LocalDateTime edate = (LocalDateTime) myDataList.get(j)[1];
                                if ((aDate.equals(sdate) || aDate.isAfter(sdate)) && aDate.isBefore(edate)) {
                                    String dStr = myDataList.get(j)[2].toString();
                                    value = dStr;
                                    switch (aType) {
                                        case INT:
                                            if (dStr.isEmpty()) {
                                                value = (int) undef;
                                            } else {
                                                value = Integer.parseInt(dStr);
                                            }
                                            break;
                                        case DOUBLE:
                                            if (dStr.isEmpty()) {
                                                value = undef;
                                            } else {
                                                value = Double.parseDouble(dStr);
                                            }
                                            break;
                                    }
                                    layer.editCellValue(CFldIdx, i, value);
                                    break;
                                }
                            }
                            app.getProgressBar().setValue((int) (((double) i + 1) / sNum * 100));
                        }
                        layer.getAttributeTable().save();
                    }
                }
            }

            //---- Hide progressbar
            app.getProgressBar().setVisible(false);
            app.getProgressBarLabel().setVisible(false);
            this.setCursor(Cursor.getDefaultCursor());
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(FrmAddData.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(FrmAddData.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                if (sr != null)
                    sr.close();
            } catch (IOException ex) {
                Logger.getLogger(FrmAddData.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton_AddDataActionPerformed

    private void jButton_CancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_CancelActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jButton_CancelActionPerformed

    private void jComboBox_DataFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_DataFieldActionPerformed
        // TODO add your handling code here:
        if (this.jComboBox_DataField.getItemCount() == 0) {
            return;
        }

        this.jPanel_FieldProp.setEnabled(true);
        this.jTextField_Name.setText(this.jComboBox_DataField.getSelectedItem().toString());
        if (Character.isDigit(this.jTextField_Name.getText().charAt(0))) {
            this.jTextField_Name.setText("A" + this.jTextField_Name.getText());
        }

        if (!this.jButton_AddData.isEnabled()) {
            this.jButton_AddData.setEnabled(true);
        }
    }//GEN-LAST:event_jComboBox_DataFieldActionPerformed

    private void jComboBox_TypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_TypeActionPerformed
        // TODO add your handling code here:
        if (this.jComboBox_Type.getItemCount() > 0) {
            switch ((DataType) this.jComboBox_Type.getSelectedItem()) {
                case INT:
                    this.jSpinner_Width.setValue(8);
                    this.jSpinner_Precision.setValue(0);
                    this.jSpinner_Precision.setVisible(false);
                    break;
                case DOUBLE:
                    this.jSpinner_Width.setValue(10);
                    this.jSpinner_Precision.setValue(4);
                    this.jSpinner_Precision.setVisible(true);
                    break;
                case STRING:
                    this.jSpinner_Width.setValue(20);
                    this.jSpinner_Precision.setValue(0);
                    this.jSpinner_Precision.setVisible(false);
                    break;
            }
        }
    }//GEN-LAST:event_jComboBox_TypeActionPerformed

    private String getTimeZoneString(int timeZone){
        if (timeZone >= 0)
            return "GMT+" + String.valueOf(timeZone);
        else
            return "GMT" + String.valueOf(timeZone);
    }
    
    private int getTimeZone(String timeZoneStr){
        int tz = 0;
        timeZoneStr = timeZoneStr.trim();
        String str = timeZoneStr.substring(3);
        if (str.substring(0, 1).equals("+"))
            str = str.substring(1);
        
        tz = Integer.parseInt(str);
        
        return tz;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmAddData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmAddData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmAddData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmAddData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                FrmAddData dialog = new FrmAddData(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_AddData;
    private javax.swing.JButton jButton_Cancel;
    private javax.swing.JButton jButton_InputFile;
    private javax.swing.JComboBox jComboBox_DataField;
    private javax.swing.JComboBox jComboBox_DateFormat;
    private javax.swing.JComboBox jComboBox_EndDateField;
    private javax.swing.JComboBox jComboBox_StartDateField;
    private javax.swing.JComboBox jComboBox_TimeZone;
    private javax.swing.JComboBox jComboBox_Type;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel_EndDate;
    private javax.swing.JLabel jLabel_StartDate;
    private javax.swing.JPanel jPanel_FieldProp;
    private javax.swing.JPanel jPanel_SelFields;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinner_Precision;
    private javax.swing.JSpinner jSpinner_Width;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField_InputFile;
    private javax.swing.JTextField jTextField_MissingValue;
    private javax.swing.JTextField jTextField_Name;
    // End of variables declaration//GEN-END:variables
}
